cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

set(CMAKE_CXX_FLAGS "-std=c++0x ${CMAKE_CXX_FALGS}")
# check C++11 / C++0x
#include (CheckCXXCompilerFlag)
#CHECK_CXX_COMPILER_FLAG ("-std=C++11" COMPILER_SUPPORTS_CXX11)
#CHECK_CXX_COMPILER_FLAG ("-std=C++0x" COMPILER_SUPPORTS_CXX0X)
#if(COMPILER_SUPPORTS_CXX11)
#	set(CMAKE_CXX_FLAGS "-std=C++11")
#elseif(COMPILER_SUPPORTS_CXX11) 
#	set(CMAKE_CXX_FLAGS "-std=C++0x")
#else()
#	message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. please use a different C++ compiler.")
#endif()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
rosbuild_genmsg()
#uncomment if you have defined services
rosbuild_gensrv()

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(chapter7_tutorials src/Node.cpp)


rosbuild_add_executable(tf_broadcaster src/tf_broadcaster.cpp)
rosbuild_add_executable(tf_listener src/tf_listener.cpp)
rosbuild_add_executable(laser src/laser.cpp)
rosbuild_add_executable(odometry src/odometry.cpp)
rosbuild_add_executable(base_controller src/base_controller.cpp)
rosbuild_add_executable(movement src/movement.cpp)
rosbuild_add_executable(neighbor_client src/neighbor_client.cpp)
rosbuild_add_executable(Control_movement src/Control_movement.cpp src/main.cpp)
# D*
rosbuild_add_executable(main src/main.cpp src/movement.cpp src/Robot_Interface.cpp)
rosbuild_add_executable(Map_Node src/Map_Node.cpp)
rosbuild_add_executable(Hashing src/Hashing.cpp)
rosbuild_add_executable(Node src/Node.cpp)
rosbuild_add_executable(DstarL src/DstarL.cpp src/Node.cpp src/Map_Node.cpp src/Hashing.cpp src/Robot_Interface.cpp)
rosbuild_add_executable(Frontier src/Frontier.cpp)
rosbuild_add_executable(Global_map src/Global_map.cpp)
rosbuild_add_executable(Robot_Interface src/Robot_Interface.cpp src/DstarL.cpp)





#rosbuild_add_executable(erratic_keyboard_teleop src/keyboard.cpp)

/* Auto-generated by genmsg_cpp for file /home/ros/dev/rosbook/chapter7_tutorials/msg/Twist.msg */
#ifndef CHAPTER7_TUTORIALS_MESSAGE_TWIST_H
#define CHAPTER7_TUTORIALS_MESSAGE_TWIST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "chapter7_tutorials/Vector3.h"
#include "chapter7_tutorials/Vector3.h"

namespace chapter7_tutorials
{
template <class ContainerAllocator>
struct Twist_ {
  typedef Twist_<ContainerAllocator> Type;

  Twist_()
  : linear()
  , angular()
  {
  }

  Twist_(const ContainerAllocator& _alloc)
  : linear(_alloc)
  , angular(_alloc)
  {
  }

  typedef  ::chapter7_tutorials::Vector3_<ContainerAllocator>  _linear_type;
   ::chapter7_tutorials::Vector3_<ContainerAllocator>  linear;

  typedef  ::chapter7_tutorials::Vector3_<ContainerAllocator>  _angular_type;
   ::chapter7_tutorials::Vector3_<ContainerAllocator>  angular;


  typedef boost::shared_ptr< ::chapter7_tutorials::Twist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chapter7_tutorials::Twist_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Twist
typedef  ::chapter7_tutorials::Twist_<std::allocator<void> > Twist;

typedef boost::shared_ptr< ::chapter7_tutorials::Twist> TwistPtr;
typedef boost::shared_ptr< ::chapter7_tutorials::Twist const> TwistConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::chapter7_tutorials::Twist_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::chapter7_tutorials::Twist_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace chapter7_tutorials

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::chapter7_tutorials::Twist_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::chapter7_tutorials::Twist_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::chapter7_tutorials::Twist_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9f195f881246fdfa2798d1d3eebca84a";
  }

  static const char* value(const  ::chapter7_tutorials::Twist_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9f195f881246fdfaULL;
  static const uint64_t static_value2 = 0x2798d1d3eebca84aULL;
};

template<class ContainerAllocator>
struct DataType< ::chapter7_tutorials::Twist_<ContainerAllocator> > {
  static const char* value() 
  {
    return "chapter7_tutorials/Twist";
  }

  static const char* value(const  ::chapter7_tutorials::Twist_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::chapter7_tutorials::Twist_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: chapter7_tutorials/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::chapter7_tutorials::Twist_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::chapter7_tutorials::Twist_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::chapter7_tutorials::Twist_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.linear);
    stream.next(m.angular);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Twist_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chapter7_tutorials::Twist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::chapter7_tutorials::Twist_<ContainerAllocator> & v) 
  {
    s << indent << "linear: ";
s << std::endl;
    Printer< ::chapter7_tutorials::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear);
    s << indent << "angular: ";
s << std::endl;
    Printer< ::chapter7_tutorials::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CHAPTER7_TUTORIALS_MESSAGE_TWIST_H

